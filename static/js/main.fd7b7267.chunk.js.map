{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","todos","todosList","value","handleDeleteToDo","todoId","event","newtodos","_this","filter","todo","id","setState","handleChange","target","handleCheckToDo","todoID","map","Object","objectSpread","completed","handleAddToDo","key","slice","newtodo","userId","Math","ceil","random","title","push","handleClearToDos","react_default","a","createElement","className","onKeyDown","this","placeholder","autofocus","onChange","App_TodoList","onClick","Component","TodoItem","props","type","checked","TodoList","_this2","App_TodoItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd7b7267.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./index.css\";\nimport todosList from \"./todos.json\";\n\nclass App extends Component {\n  state = {\n    todos: todosList,\n    value: \"\"\n  };\n\n  handleDeleteToDo = todoId => event => {\n    const newtodos = this.state.todos.filter(todo => todo.id !== todoId);\n    this.setState({ todos: newtodos });\n  };\n\n  handleChange = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  handleCheckToDo = todoID => event => {\n    const newtodos = this.state.todos.map(todo => {\n      if (todo.id === todoID) {\n        return { ...todo, completed: !todo.completed };\n      }\n      return todo;\n    });\n    this.setState({ todos: newtodos });\n  };\n\n  handleAddToDo = event => {\n    if (event.key === \"Enter\") {\n      const newtodos = this.state.todos.slice();\n      const newtodo = {\n        userId: 1,\n        id: Math.ceil(Math.random() * 10000000),\n        title: this.state.value,\n        completed: false\n      };\n      newtodos.push(newtodo);\n      this.setState({\n        todos: newtodos,\n        value: \"\"\n      });\n    }\n  };\n\n  handleClearToDos = event => {\n    const newtodos = this.state.todos.filter(todo => todo.completed === false);\n    this.setState({\n      todos: newtodos\n    });\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            onKeyDown={this.handleAddToDo}\n            value={this.state.value}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autofocus\n            onChange={this.handleChange}\n          />\n        </header>\n        <TodoList\n          todos={this.state.todos}\n          handleDeleteToDo={this.handleDeleteToDo}\n          handleCheckToDo={this.handleCheckToDo}\n        />\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>0</strong> item(s) left\n          </span>\n          <button onClick={this.handleClearToDos} className=\"clear-completed\">\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nclass TodoItem extends Component {\n  render() {\n    return (\n      <li className={this.props.completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={this.props.completed}\n            onClick={this.props.handleCheckToDo}\n          />\n          <label>{this.props.title}</label>\n          <button onClick={this.props.handleDeleteToDo} className=\"destroy\" />\n        </div>\n      </li>\n    );\n  }\n}\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {this.props.todos.map(todo => (\n            <TodoItem\n              title={todo.title}\n              completed={todo.completed}\n              handleDeleteToDo={this.props.handleDeleteToDo(todo.id)}\n              handleCheckToDo={this.props.handleCheckToDo(todo.id)}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}